services:

  # MinIO Client service to initialize buckets and access keys
  mc:
    image: minio/mc
    container_name: mc
    networks:
      - a2a-network
    environment:
      - MINIO_USER=${MINIO_USER}
      - MINIO_PASSWORD=${MINIO_PASSWORD}
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      minio:
        condition: service_started
    entrypoint: >
      /bin/sh -c "
      echo 'Waiting for MinIO to be ready...';
      sleep 10;
      mc alias set myminio http://minio:9000 ${MINIO_USER} ${MINIO_PASSWORD};
      echo 'Creating tasks bucket...';
      mc mb myminio/tasks --ignore-existing;
      echo 'Creating access key for agents...';
      mc admin user add myminio ${AWS_ACCESS_KEY_ID} ${AWS_SECRET_ACCESS_KEY};
      mc admin policy attach myminio readwrite --user ${AWS_ACCESS_KEY_ID};
      echo 'MinIO setup complete!';
      exit 0;
      "

  test:
    image: theapemachine/a2a-go:latest
    container_name: test
    command: ["test"]
    env_file:
      - .env
    networks:
      - a2a-network
    depends_on:
      mc:
        condition: service_completed_successfully
      catalog:
        condition: service_started
      ui:
        condition: service_started
      manager:
        condition: service_started
      planner:
        condition: service_started
      researcher:
        condition: service_started
      developer:
        condition: service_started
      slack:
        condition: service_started
      dockertool:
        condition: service_started
      browsertool:
        condition: service_started
      catalogtool:
        condition: service_started
      azure_get_sprints:
        condition: service_started
      azure_create_sprint:  
        condition: service_started
      azure_sprint_items:
        condition: service_started
      azure_sprint_overview:
        condition: service_started
      azure_get_work_items:
        condition: service_started
      azure_create_work_items:
        condition: service_started
      azure_update_work_items:
        condition: service_started
      azure_execute_wiql:
        condition: service_started
      azure_search_work_items:
        condition: service_started
      azure_enrich_work_item:
        condition: service_started
      azure_get_github_file_content:
        condition: service_started
      azure_work_item_comments:
        condition: service_started
      azure_find_items_by_status:
        condition: service_started

  # Central catalog service that all agents register with
  catalog:
    image: theapemachine/a2a-go:latest
    container_name: catalog
    command: ["catalog"]
    networks:
      - a2a-network
    ports:
      - "3210:3210"
    depends_on:
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      neo4j:
        condition: service_started

  webhook:
    image: theapemachine/a2a-go:latest
    container_name: webhook
    command: ["webhook"]
    env_file:
      - .env
    networks:
      - a2a-network
    ports:
      - "3211:3210"
    depends_on:
      catalog:
        condition: service_started

  slack:
    image: theapemachine/a2a-go:latest
    container_name: slacktool
    command: ["slack"]
    env_file:
      - .env
    environment:
      - SLACK_APP_TOKEN=${MARVIN_APP_TOKEN}
      - SLACK_BOT_TOKEN=${MARVIN_BOT_TOKEN}
    networks:
      - a2a-network
    depends_on:
      catalog:
        condition: service_started

  dockertool:
    image: theapemachine/a2a-go:latest
    container_name: dockertool
    command: ["mcp", "-c", "docker"]
    env_file:
      - .env
    networks:
      - a2a-network

  browsertool:
    image: theapemachine/a2a-go:latest
    container_name: browser
    command: ["mcp", "-c", "browser"]
    env_file:
      - .env
    networks:
      - a2a-network

  catalogtool:
    image: theapemachine/a2a-go:latest
    container_name: catalogtool
    command: ["mcp", "-c", "catalog"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_get_sprints:
    image: theapemachine/a2a-go:latest
    container_name: azure_get_sprints
    command: ["mcp", "-c", "azure_get_sprints"]
    env_file:
      - .env
    environment:
      - AZURE_DEVOPS_ORG=${AZURE_DEVOPS_ORG}
      - AZDO_PAT=${AZDO_PAT}
      - AZURE_DEVOPS_PROJECT=${AZURE_DEVOPS_PROJECT}
      - AZURE_DEVOPS_TEAM=${AZURE_DEVOPS_TEAM}
    networks:
      - a2a-network

  azure_create_sprint:
    image: theapemachine/a2a-go:latest
    container_name: azure_create_sprint
    command: ["mcp", "-c", "azure_create_sprint"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_sprint_items:
    image: theapemachine/a2a-go:latest
    container_name: azure_sprint_items
    command: ["mcp", "-c", "azure_sprint_items"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_sprint_overview:
    image: theapemachine/a2a-go:latest
    container_name: azure_sprint_overview
    command: ["mcp", "-c", "azure_sprint_overview"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_get_work_items:
    image: theapemachine/a2a-go:latest
    container_name: azure_get_work_items
    command: ["mcp", "-c", "azure_get_work_items"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_create_work_items:
    image: theapemachine/a2a-go:latest
    container_name: azure_create_work_items
    command: ["mcp", "-c", "azure_create_work_items"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_update_work_items:
    image: theapemachine/a2a-go:latest
    container_name: azure_update_work_items
    command: ["mcp", "-c", "azure_update_work_items"] 
    env_file:
      - .env
    networks:
      - a2a-network

  azure_execute_wiql: 
    image: theapemachine/a2a-go:latest
    container_name: azure_execute_wiql
    command: ["mcp", "-c", "azure_execute_wiql"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_search_work_items:
    image: theapemachine/a2a-go:latest
    container_name: azure_search_work_items
    command: ["mcp", "-c", "azure_search_work_items"]
    env_file:
      - .env  
    networks:
      - a2a-network

  azure_enrich_work_item:
    image: theapemachine/a2a-go:latest
    container_name: azure_enrich_work_item
    command: ["mcp", "-c", "azure_enrich_work_item"]  
    env_file:
      - .env
    networks:
      - a2a-network

  azure_get_github_file_content:
    image: theapemachine/a2a-go:latest
    container_name: azure_get_github_file_content
    command: ["mcp", "-c", "azure_get_github_file_content"]
    env_file:
      - .env
    networks:
      - a2a-network

  azure_work_item_comments:
    image: theapemachine/a2a-go:latest
    container_name: azure_work_item_comments
    command: ["mcp", "-c", "azure_work_item_comments"]
    env_file:
      - .env  
    networks:
      - a2a-network

  azure_find_items_by_status:
    image: theapemachine/a2a-go:latest
    container_name: azure_find_items_by_status  
    command: ["mcp", "-c", "azure_find_items_by_status"]
    env_file:
      - .env
    networks:
      - a2a-network

  # UI agent service - specialized in relaying messages between the user and the agents.
  ui:
    image: theapemachine/a2a-go:latest
    container_name: ui
    command: ["agent", "-c", "ui"]
    env_file:
      - .env
    environment:
      - CATALOG_URL=http://catalog:3210
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    ports:
      - "3212:3210"
    networks:
      - a2a-network
    depends_on:
      mc:
        condition: service_completed_successfully
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      neo4j:
        condition: service_started

  # TUI service - the user interface for interacting with the agents.
  tui:
    image: theapemachine/a2a-go:latest
    container_name: tui
    command: ["tui"]
    env_file:
      - .env
    environment:
      - CATALOG_URL=http://catalog:3210
    networks:
      - a2a-network
    depends_on:
      - ui

  # Manager agent service - specialized in managing tasks and agents.
  manager:
    image: theapemachine/a2a-go:latest  
    container_name: manager
    command: ["agent", "-c", "manager"]
    env_file:
      - .env
    networks:
      - a2a-network
    environment:
      - CATALOG_URL=http://catalog:3210
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      mc:
        condition: service_completed_successfully
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      neo4j:
        condition: service_started

  # Planner agent service - specialized in planning tasks.
  planner:
    image: theapemachine/a2a-go:latest
    container_name: planner
    command: ["agent", "-c", "planner"]
    env_file:
      - .env
    networks:
      - a2a-network
    environment:
      - CATALOG_URL=http://catalog:3210
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      mc:
        condition: service_completed_successfully
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      neo4j:
        condition: service_started

  # Researcher agent service - specialized in researching information.
  researcher:
    image: theapemachine/a2a-go:latest
    container_name: researcher
    command: ["agent", "-c", "researcher"]
    env_file:
      - .env
    networks:
      - a2a-network
    environment:
      - CATALOG_URL=http://catalog:3210
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      mc:
        condition: service_completed_successfully
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      neo4j:
        condition: service_started

  # Developer agent service - specialized in implementing solutions
  developer:
    image: theapemachine/a2a-go:latest
    container_name: developer
    command: ["agent", "-c", "developer"]
    env_file:
      - .env
    networks:
      - a2a-network
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock # For Docker-in-Docker capabilities.
    environment:
      - CATALOG_URL=http://catalog:3210
      - AWS_ACCESS_KEY_ID=${AWS_ACCESS_KEY_ID}
      - AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
    depends_on:
      mc:
        condition: service_completed_successfully
      minio:
        condition: service_started
      qdrant:
        condition: service_started
      neo4j:
        condition: service_started

  # Persistence and storage services
  minio:
    image: minio/minio
    container_name: minio
    env_file:
      - .env
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - a2a-network
    extra_hosts:
      - "host.docker.internal:host-gateway"
    environment:
      - MINIO_ROOT_USER=${MINIO_USER}
      - MINIO_ROOT_PASSWORD=${MINIO_PASSWORD}
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data

  qdrant:
    image: qdrant/qdrant:latest
    container_name: qdrant
    ports:
      - "6333:6333" # REST API
      - "6334:6334" # gRPC API
    networks:
      - a2a-network
    volumes:
      - qdrant_data:/qdrant/storage
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/readiness"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  neo4j:
    image: neo4j:latest
    container_name: neo4j
    ports:
      - "7474:7474" # Browser
      - "7687:7687" # Bolt
    networks:
      - a2a-network
    environment:
      - NEO4J_AUTH=neo4j/password
      - NEO4J_apoc_export_file_enabled=true
      - NEO4J_apoc_import_file_enabled=true
      - NEO4J_apoc_import_file_use__neo4j__config=true
      - NEO4JLABS_PLUGINS=["apoc"]
    volumes:
      - neo4j_data:/data
      - neo4j_logs:/logs
      - neo4j_conf:/conf
    healthcheck:
      test:
        ["CMD", "wget", "--no-verbose", "--spider", "localhost:7474/browser"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

networks:
  a2a-network:
    driver: bridge

volumes:
  qdrant_data:
  neo4j_data:
  neo4j_logs:
  neo4j_conf:
  minio_data:
